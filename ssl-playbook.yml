---
    - hosts: localhost
      remote_user: wasimali
      become: yes
      vars:
        - acme_challenge_type: http-01
        - acme_directory: https://acme-v02.api.letsencrypt.org/directory
        - acme_version: 2
        - acme_email: shubham@trackier.com
        - letsencrypt_dir: /home/wasimali/test2_ansible/
        - letsencrypt_keys_dir: /home/wasimali/test2_ansible/keys
        - letsencrypt_csrs_dir: /home/wasimali/test2_ansible/csrs
        - letsencrypt_certs_dir: /home/wasimali/test2_ansible/certs
        - letsencrypt_account_key: /home/wasimali/test2_ansible/account/account.key
        - domain_name: "{{ lookup('file','/home/wasimali/test2_ansible/f4.txt') }}"
        - contents: "{{ lookup('file','/home/wasimali/test2_ansible/f3.txt') }}"
        - removed_ssl: "{{ lookup('file','/home/wasimali/test2_ansible/f5.txt') }}"
        - user_input: "{{ lookup('file','/home/wasimali/test2_ansible/user_input.txt') }}"
        - proxy: "{{ lookup('file','/home/wasimali/test2_ansible/proxy.txt') }}"


      tasks:
      - name: "Create required directories in /etc/letsencrypt"
        file:
          path: "/home/wasimali/test2_ansible/{{ item }}"
          state: directory
          owner: wasimali
          group: wasimali
          mode: u=rwx,g=x,o=x
        with_items:
        - account
        - certs
        - csrs
        - keys
      - name: "Generate a Let's Encrypt account key"
        shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 2048 | sudo tee {{ letsencrypt_account_key }}; fi"

      - name: "Generate Let's Encrypt private key"
        shell: "openssl genrsa 2048 | sudo tee /home/wasimali/test2_ansible/keys/{{ domain_name }}.key"

      - name: "Generate Let's Encrypt CSR"
        shell: "openssl req -new -sha256 -key /home/wasimali/test2_ansible/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},{{ contents }}\")) | sudo tee /home/wasimali/test2_ansible/csrs/{{ domain_name }}.csr"
        args:
          executable: /bin/bash


      - name: "Begin Let's Encrypt challenges"
        letsencrypt:
          acme_directory: "{{ acme_directory }}"
          acme_version: "{{ acme_version }}"
          account_key_src: "{{ letsencrypt_account_key }}"
          account_email: "{{ acme_email }}"
          terms_agreed: 1
          challenge: "{{ acme_challenge_type }}"
          csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
          dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
          fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
          remaining_days: 91
        register: acme_challenge_afftrac_com


      - name: "CURL for domain"
        shell: "curl 'http://{{ domain_name }}/{{ acme_challenge_afftrac_com['challenge_data'][item]['http-01']['resource'] }}?set_token=1&value={{ acme_challenge_afftrac_com['challenge_data'][item]['http-01']['resource_value'] }}'"
        with_items:
        - "{{ domain_name }}"


      - name: "CURL for SAN"
        shell: "curl 'http://{{ item }}/{{ acme_challenge_afftrac_com['challenge_data'][item]['http-01']['resource'] }}?set_token=1&value={{ acme_challenge_afftrac_com['challenge_data'][item]['http-01']['resource_value'] }}'"
        loop: "{{ lookup('file', '/home/wasimali/test2_ansible/f2.txt').splitlines() }}"

   #   - name: “Creating files of name domain”
  #    shell: "name=trackier-app-$(date +%s) && echo $name > /home/wasimali/test2_ansible/ssl_name.txt && touch /home/wasimali/$name.txt"

      - name: "Complete Let's Encrypt challenges"
        letsencrypt:
          acme_directory: "{{ acme_directory }}"
          acme_version: "{{ acme_version }}"
          account_key_src: "{{ letsencrypt_account_key }}"
          account_email: "{{ acme_email }}"
          challenge: "{{ acme_challenge_type }}"
          csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
          dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
          chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
          fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
          data: "{{ acme_challenge_afftrac_com }}"


      - name: "registering value"
        shell: "name={{ user_input }}-$(date +%s) && echo $name"
        register: fun


      - name: "Appending new ssl cert name to the log file"
        shell: |
           echo "New cert - "{{ fun.stdout }} >> /home/wasimali/test2_ansible/ssl-log.txt
           echo {{ fun.stdout }} >> /home/wasimali/test2_ansible/f8.txt



      - name: “Uploading cert to GCP"
        shell: "gcloud beta compute ssl-certificates create {{ fun.stdout }} --project=tranquil-apogee-150510 --global --certificate={{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }} --private-key={{ letsencrypt_keys_dir }}/{{ domain_name }}.key"
        register: fan


      - name: "List of attached ssl certificate on target proxy"
        shell: |
             echo "******The List of SSL Cert's attached on testing-trackier-target-proxy*******"
             gcloud beta compute target-https-proxies describe {{ proxy }} | grep {{ user_input }} | awk '/sslCertificates/ {print $0}' | cut -d "/" -f 10
             echo "------------------------------------------------------------------------------"
             echo "Old cert:-"{{ removed_ssl }}
             echo "New cert:-"{{ fun.stdout }}
        register: out
      - debug: var=out.stdout_lines


      - name: "Pause to get some input"
        ansible.builtin.pause:
             prompt: "Are you sure to proceed? to update load balancer's with the new SSL cert's [y,n]"
             echo: yes
        register: gen


      - meta: end_play
        when: (gen.user_input == "no" or gen.user_input == "n")


      - name: "Updating Certificates on GCP target-proxies"
        shell: |
             echo "Working on it ......"
             za=$(gcloud beta compute target-https-proxies describe testing-trackier-lb-target-proxy-2 | awk '/sslCertificates/ {print $0}' | cut -d "/" -f 10 | tail -n +2 | grep -v {{ removed_ssl }})
             pa=$(echo $za | tr ' ' ',')
             echo $pa
             gcloud compute target-https-proxies update {{ item }} --ssl-certificates $pa,{{ fun.stdout }}
        loop: "{{ lookup('file', '/home/wasimali/test2_ansible/proxy.txt').splitlines() }}"
        register: boo
      - debug: var=boo.stdout_lines
